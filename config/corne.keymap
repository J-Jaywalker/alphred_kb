/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define ALPH 0 
#define ARROWS 1
#define BLUETOOTH 2
#define GAME 3
/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        spund: space_under {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bckdl: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };
    };

    // These are some janky workarounds to produce UK keycodes. 
    // I wanted to be able to reference a useful keycode name instead of sending off some random keycode
    // and hoping I remember what is was 6 months later
    macros {
        hash_uk: hash_uk {
            compatible = "zmk,behavior-macro";
            label = "UK_HASH";
            bindings = <&kp LS(BACKSLASH)>;
        };

        pipe_uk: pipe_uk {
            compatible = "zmk,behavior-macro";
            label = "UK_PIPE";
            bindings = <&kp LS(NON_US_HASH)>;
        };

        tilde_uk: tilde_uk {
            compatible = "zmk,behavior-macro";
            label = "UK_TILDE";
            bindings = <&kp LS(GRAVE)>;
        };

        pound_uk: pound_uk {
        compatible = "zmk,behavior-macro";
        label = "UK_POUND";
        bindings = <&kp LS(N3)>;
    };

    combos {
        compatible = "zmk,combos";

        game_mode {
            bindings = <&to GAME>;
            key-positions = <17 13 31 3>;
            timeout-ms = <25>;
        };

        back_to_work {
            bindings = <&to ALPH>;
            key-positions = <2 9 4 20>;
            timeout-ms = <25>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 3>;
            timeout-ms = <25>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
            timeout-ms = <25>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
            timeout-ms = <25>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <25>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
            timeout-ms = <25>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 31>;
            timeout-ms = <25>;
        };

        hash {
            bindings = <&hash_uk>;
            key-positions = <5 6>;
            timeout-ms = <25>;
        };

        pipe {
            bindings = <&pipe_uk>;
            key-positions = <17 18>;
            timeout-ms = <25>;
        };

        excl {
            bindings = <&kp EXCL>;
            key-positions = <1 2>;
            timeout-ms = <25>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 3>;
            timeout-ms = <25>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <20 21>;
            timeout-ms = <25>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <14 15>;
            timeout-ms = <25>;
        };

        eql {
            bindings = <&kp EQUAL>;
            key-positions = <9 10>;
            timeout-ms = <25>;
        };

        amp{
            bindings = <&kp AMPS>; 
            key-positions = <22 23>;
            timeout-ms = <25>;
        };

        caret{
            bindings = <&kp CARET>; 
            key-positions = <6 7>;
            timeout-ms = <25>;
        };

        caps{
            bindings = <&kp CAPS>; 
            key-positions = <16 19>;
            timeout-ms = <25>;
        };

        tilde{
            bindings = <&tilde_uk>; 
            key-positions = <21 22>;
            timeout-ms = <25>;
        };

        uk_pound{
            bindings = <&pound_uk>; 
            key-positions = <4 5>;
            timeout-ms = <25>;
        };

    };

    keymap {
        compatible = "zmk,keymap";
        CHAR {
            display-name = "ALPH";
            bindings = <
&gresc      &kp Q             &kp W            &kp E        &kp R             &kp T        &kp Y      &kp U             &kp I          &kp O            &kp P               &bckdl
&kp TAB     &hm LEFT_GUI A    &hm LEFT_ALT S   &hm LCTRL D  &hm LEFT_SHIFT F  &kp G        &kp H      &hm RSHIFT J      &hm RCTRL K    &hm RIGHT_ALT L  &hm RGUI SEMICOLON  &kp SQT
&kp LSHIFT  &kp Z             &kp X            &kp C        &kp V             &kp B        &kp N      &kp M             &kp COMMA      &kp DOT          &kp FSLH            &kp ENTER
                                               &kp LALT     &kp LCTRL         &kp LGUI                &spund            &mo ARROWS     &mo BLUETOOTH
            >;
        };

        ARR {
            display-name = "ARRW";
            bindings = <
&bckdl      &none  &kp N7  &kp N8    &kp N9    &kp PERCENT         &kp F12  &none     &kp UP     &none      &kp F5    &bckdl
&kp TAB     &none  &kp N4  &kp N5    &kp N6    &kp AMPS            &none    &kp LEFT  &kp DOWN   &kp RIGHT  &kp SEMI  &kp SQT
&kp LSHIFT  &none  &kp N1  &kp N2    &kp N3    &kp STAR            &none    &none     &kp COMMA  &kp DOT    &kp FSLH  &kp ENTER
                       &kp LALT  &kp N0    &spund              &spund   &none     &kp LGUI
            >;
        };

        BT {
            display-name = "BLUT";
            bindings = <
&none  &none  &none  &none       &none  &none          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none  &bt BT_CLR
&none  &none  &none  &none       &none  &none          &none         &none         &none         &none         &none  &none
&none  &none  &none  &none       &none  &none          &none         &none         &none         &none         &none  &none
                     &none       &none  &none          &none         &none         &none
            >;
        };

        GAME {
            display-name = "GAME";
            bindings = <
&kp ESC     &kp Q  &kp W   &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I      &kp O    &kp P          &kp BSPC
&kp TAB  &kp A  &kp S   &kp D  &kp F  &kp G  &kp H  &kp J  &kp K      &kp L    &kp SEMICOLON  &kp SQT
&kp LSHIFT    &kp Z  &kp X   &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH       &kp ENTER
            &kp LCTL       &kp SPACE     &kp TAB       &kp LALT         &mo ARROWS     &kp LGUI
            >;
        };
        extra1 { 
            status = "reserved";
        };
        extra2 {
            status = "reserved";
        };
        extra3 {
            status = "reserved";
        };
        extra4 {
            status = "reserved";
        };

    };
};
};
